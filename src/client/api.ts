/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Voldrop API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://api.voldrop.ru".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration!: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = window.fetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name = "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * ContentApi - fetch parameter creator
 * @export
 */
export const ContentApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary add to cart
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContentCartAddPost(body?: any, options: any = {}): FetchArgs {
            const localVarPath = `/api/content/cart/add/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"any" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary decrease cart item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContentCartDecrease5Post(options: any = {}): FetchArgs {
            const localVarPath = `/api/content/cart/decrease/5/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete cart item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContentCartDelete1Delete(options: any = {}): FetchArgs {
            const localVarPath = `/api/content/cart/delete/1/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get cart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContentCartGet(options: any = {}): FetchArgs {
            const localVarPath = `/api/content/cart/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get filter
         * @param {string} [category] 
         * @param {string} [brand] 
         * @param {string} [collection] 
         * @param {string} [season] 
         * @param {string} [tags] 
         * @param {string} [original] 
         * @param {string} [minPrice] 
         * @param {string} [maxPrice] 
         * @param {string} [colors] 
         * @param {string} [sizes] 
         * @param {string} [isPopular] 
         * @param {string} [isNew] 
         * @param {string} [search] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContentFilterGet(category?: string, brand?: string, collection?: string, season?: string, tags?: string, original?: string, minPrice?: string, maxPrice?: string, colors?: string, sizes?: string, isPopular?: string, isNew?: string, search?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/content/filter/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication noauthAuth required
            // http basic authentication required
            if (configuration && configuration.accessToken) {
                localVarHeaderParameter["Authorization"] = "Bearer " + configuration.accessToken;
            }

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (brand !== undefined) {
                localVarQueryParameter['brand'] = brand;
            }

            if (collection !== undefined) {
                localVarQueryParameter['collection'] = collection;
            }

            if (season !== undefined) {
                localVarQueryParameter['season'] = season;
            }

            if (tags !== undefined) {
                localVarQueryParameter['tags'] = tags;
            }

            if (original !== undefined) {
                localVarQueryParameter['original'] = original;
            }

            if (minPrice !== undefined) {
                localVarQueryParameter['min_price'] = minPrice;
            }

            if (maxPrice !== undefined) {
                localVarQueryParameter['max_price'] = maxPrice;
            }

            if (colors !== undefined) {
                localVarQueryParameter['colors'] = colors;
            }

            if (sizes !== undefined) {
                localVarQueryParameter['sizes'] = sizes;
            }

            if (isPopular !== undefined) {
                localVarQueryParameter['is_popular'] = isPopular;
            }

            if (isNew !== undefined) {
                localVarQueryParameter['is_new'] = isNew;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary create order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContentOrderCreatePost(options: any = {}): FetchArgs {
            const localVarPath = `/api/content/order/create/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary order history
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContentOrderHistoryGet(options: any = {}): FetchArgs {
            const localVarPath = `/api/content/order/history/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary callback
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContentPaymentCallbackPost(body?: any, options: any = {}): FetchArgs {
            const localVarPath = `/api/content/payment/callback/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"any" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get product
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContentProduct7Get(options: any = {}): FetchArgs {
            const localVarPath = `/api/content/product/${options.id}/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication noauthAuth required
            // http basic authentication required
            if (configuration && configuration.accessToken) {
                localVarHeaderParameter["Authorization"] = "Bearer " + configuration.accessToken;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get products
         * @param {string} [category] 
         * @param {string} [brand] 
         * @param {string} [collection] 
         * @param {string} [season] 
         * @param {string} [tags] 
         * @param {string} [original] 
         * @param {string} [minPrice] 
         * @param {string} [maxPrice] 
         * @param {string} [colors] 
         * @param {string} [sizes] 
         * @param {string} [isPopular] 
         * @param {string} [isNew] 
         * @param {string} [search] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContentProductsGet(category?: string, brand?: string, collection?: string, season?: string, tags?: string, original?: string, minPrice?: string, maxPrice?: string, colors?: string, sizes?: string, isPopular?: string, isNew?: string, search?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/content/products/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication noauthAuth required
            // http basic authentication required
            if (configuration && configuration.accessToken) {
                localVarHeaderParameter["Authorization"] = "Bearer " + configuration.accessToken;
            }

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (brand !== undefined) {
                localVarQueryParameter['brand'] = brand;
            }

            if (collection !== undefined) {
                localVarQueryParameter['collection'] = collection;
            }

            if (season !== undefined) {
                localVarQueryParameter['season'] = season;
            }

            if (tags !== undefined) {
                localVarQueryParameter['tags'] = tags;
            }

            if (original !== undefined) {
                localVarQueryParameter['original'] = original;
            }

            if (minPrice !== undefined) {
                localVarQueryParameter['min_price'] = minPrice;
            }

            if (maxPrice !== undefined) {
                localVarQueryParameter['max_price'] = maxPrice;
            }

            if (colors !== undefined) {
                localVarQueryParameter['colors'] = colors;
            }

            if (sizes !== undefined) {
                localVarQueryParameter['sizes'] = sizes;
            }

            if (isPopular !== undefined) {
                localVarQueryParameter['is_popular'] = isPopular;
            }

            if (isNew !== undefined) {
                localVarQueryParameter['is_new'] = isNew;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContentApi - functional programming interface
 * @export
 */
export const ContentApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary add to cart
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContentCartAddPost(body?: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ContentApiFetchParamCreator(configuration).apiContentCartAddPost(body, options);
            return (fetch: FetchAPI = window.fetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary decrease cart item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContentCartDecrease5Post(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ContentApiFetchParamCreator(configuration).apiContentCartDecrease5Post(options);
            return (fetch: FetchAPI = window.fetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary delete cart item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContentCartDelete1Delete(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ContentApiFetchParamCreator(configuration).apiContentCartDelete1Delete(options);
            return (fetch: FetchAPI = window.fetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary get cart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContentCartGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ContentApiFetchParamCreator(configuration).apiContentCartGet(options);
            return (fetch: FetchAPI = window.fetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary get filter
         * @param {string} [category] 
         * @param {string} [brand] 
         * @param {string} [collection] 
         * @param {string} [season] 
         * @param {string} [tags] 
         * @param {string} [original] 
         * @param {string} [minPrice] 
         * @param {string} [maxPrice] 
         * @param {string} [colors] 
         * @param {string} [sizes] 
         * @param {string} [isPopular] 
         * @param {string} [isNew] 
         * @param {string} [search] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContentFilterGet(category?: string, brand?: string, collection?: string, season?: string, tags?: string, original?: string, minPrice?: string, maxPrice?: string, colors?: string, sizes?: string, isPopular?: string, isNew?: string, search?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ContentApiFetchParamCreator(configuration).apiContentFilterGet(category, brand, collection, season, tags, original, minPrice, maxPrice, colors, sizes, isPopular, isNew, search, options);
            return (fetch: FetchAPI = window.fetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary create order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContentOrderCreatePost(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ContentApiFetchParamCreator(configuration).apiContentOrderCreatePost(options);
            return (fetch: FetchAPI = window.fetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary order history
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContentOrderHistoryGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ContentApiFetchParamCreator(configuration).apiContentOrderHistoryGet(options);
            return (fetch: FetchAPI = window.fetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary callback
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContentPaymentCallbackPost(body?: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ContentApiFetchParamCreator(configuration).apiContentPaymentCallbackPost(body, options);
            return (fetch: FetchAPI = window.fetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary get product
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContentProduct7Get(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ContentApiFetchParamCreator(configuration).apiContentProduct7Get(options);
            return (fetch: FetchAPI = window.fetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary get products
         * @param {string} [category] 
         * @param {string} [brand] 
         * @param {string} [collection] 
         * @param {string} [season] 
         * @param {string} [tags] 
         * @param {string} [original] 
         * @param {string} [minPrice] 
         * @param {string} [maxPrice] 
         * @param {string} [colors] 
         * @param {string} [sizes] 
         * @param {string} [isPopular] 
         * @param {string} [isNew] 
         * @param {string} [search] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContentProductsGet(category?: string, brand?: string, collection?: string, season?: string, tags?: string, original?: string, minPrice?: string, maxPrice?: string, colors?: string, sizes?: string, isPopular?: string, isNew?: string, search?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ContentApiFetchParamCreator(configuration).apiContentProductsGet(category, brand, collection, season, tags, original, minPrice, maxPrice, colors, sizes, isPopular, isNew, search, options);
            return (fetch: FetchAPI = window.fetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ContentApi - factory interface
 * @export
 */
export const ContentApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary add to cart
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContentCartAddPost(body?: any, options?: any) {
            return ContentApiFp(configuration).apiContentCartAddPost(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary decrease cart item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContentCartDecrease5Post(options?: any) {
            return ContentApiFp(configuration).apiContentCartDecrease5Post(options)(fetch, basePath);
        },
        /**
         * 
         * @summary delete cart item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContentCartDelete1Delete(options?: any) {
            return ContentApiFp(configuration).apiContentCartDelete1Delete(options)(fetch, basePath);
        },
        /**
         * 
         * @summary get cart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContentCartGet(options?: any) {
            return ContentApiFp(configuration).apiContentCartGet(options)(fetch, basePath);
        },
        /**
         * 
         * @summary get filter
         * @param {string} [category] 
         * @param {string} [brand] 
         * @param {string} [collection] 
         * @param {string} [season] 
         * @param {string} [tags] 
         * @param {string} [original] 
         * @param {string} [minPrice] 
         * @param {string} [maxPrice] 
         * @param {string} [colors] 
         * @param {string} [sizes] 
         * @param {string} [isPopular] 
         * @param {string} [isNew] 
         * @param {string} [search] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContentFilterGet(category?: string, brand?: string, collection?: string, season?: string, tags?: string, original?: string, minPrice?: string, maxPrice?: string, colors?: string, sizes?: string, isPopular?: string, isNew?: string, search?: string, options?: any) {
            return ContentApiFp(configuration).apiContentFilterGet(category, brand, collection, season, tags, original, minPrice, maxPrice, colors, sizes, isPopular, isNew, search, options)(fetch, basePath);
        },
        /**
         * 
         * @summary create order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContentOrderCreatePost(options?: any) {
            return ContentApiFp(configuration).apiContentOrderCreatePost(options)(fetch, basePath);
        },
        /**
         * 
         * @summary order history
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContentOrderHistoryGet(options?: any) {
            return ContentApiFp(configuration).apiContentOrderHistoryGet(options)(fetch, basePath);
        },
        /**
         * 
         * @summary callback
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContentPaymentCallbackPost(body?: any, options?: any) {
            return ContentApiFp(configuration).apiContentPaymentCallbackPost(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary get product
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContentProduct7Get(options?: any) {
            return ContentApiFp(configuration).apiContentProduct7Get(options)(fetch, basePath);
        },
        /**
         * 
         * @summary get products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContentProductsGet(options?: any) {
            return ContentApiFp(configuration).apiContentProductsGet(options)(fetch, basePath);
        },
    };
};

/**
 * ContentApi - object-oriented interface
 * @export
 * @class ContentApi
 * @extends {BaseAPI}
 */
export class ContentApi extends BaseAPI {
    /**
     * 
     * @summary add to cart
     * @param {any} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public apiContentCartAddPost(body?: any, options?: any) {
        return ContentApiFp(this.configuration).apiContentCartAddPost(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary decrease cart item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public apiContentCartDecrease5Post(options?: any) {
        return ContentApiFp(this.configuration).apiContentCartDecrease5Post(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary delete cart item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public apiContentCartDelete1Delete(options?: any) {
        return ContentApiFp(this.configuration).apiContentCartDelete1Delete(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary get cart
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public apiContentCartGet(options?: any) {
        return ContentApiFp(this.configuration).apiContentCartGet(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary get filter
     * @param {string} [category] 
     * @param {string} [brand] 
     * @param {string} [collection] 
     * @param {string} [season] 
     * @param {string} [tags] 
     * @param {string} [original] 
     * @param {string} [minPrice] 
     * @param {string} [maxPrice] 
     * @param {string} [colors] 
     * @param {string} [sizes] 
     * @param {string} [isPopular] 
     * @param {string} [isNew] 
     * @param {string} [search] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public apiContentFilterGet(category?: string, brand?: string, collection?: string, season?: string, tags?: string, original?: string, minPrice?: string, maxPrice?: string, colors?: string, sizes?: string, isPopular?: string, isNew?: string, search?: string, options?: any) {
        return ContentApiFp(this.configuration).apiContentFilterGet(category, brand, collection, season, tags, original, minPrice, maxPrice, colors, sizes, isPopular, isNew, search, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary create order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public apiContentOrderCreatePost(options?: any) {
        return ContentApiFp(this.configuration).apiContentOrderCreatePost(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary order history
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public apiContentOrderHistoryGet(options?: any) {
        return ContentApiFp(this.configuration).apiContentOrderHistoryGet(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary callback
     * @param {any} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public apiContentPaymentCallbackPost(body?: any, options?: any) {
        return ContentApiFp(this.configuration).apiContentPaymentCallbackPost(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary get product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public apiContentProduct7Get(options?: any) {
        return ContentApiFp(this.configuration).apiContentProduct7Get(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary get products
     * @param {*} [options] Override http request option.
     * @param {string} [category] 
     * @param {string} [brand] 
     * @param {string} [collection] 
     * @param {string} [season] 
     * @param {string} [tags] 
     * @param {string} [original] 
     * @param {string} [minPrice] 
     * @param {string} [maxPrice] 
     * @param {string} [colors] 
     * @param {string} [sizes] 
     * @param {string} [isPopular] 
     * @param {string} [isNew] 
     * @param {string} [search] 
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public apiContentProductsGet(category?: string, brand?: string, collection?: string, season?: string, tags?: string, original?: string, minPrice?: string, maxPrice?: string, colors?: string, sizes?: string, isPopular?: string, isNew?: string, search?: string, options?: any) {
        return ContentApiFp(this.configuration).apiContentProductsGet(category, brand, collection, season, tags, original, minPrice, maxPrice, colors, sizes, isPopular, isNew, search, options)(this.fetch, this.basePath);
    }

}
/**
 * UserApi - fetch parameter creator
 * @export
 */
export const UserApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary change name
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthChangeNamePost(body?: any, options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/change_name/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"any" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary sub
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthSubscribePost(body?: any, options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/sub/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"any" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary change password
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthChangePasswordPost(body?: any, options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/change_password/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"any" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary notifications check
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthCheckNotsPost(body?: any, options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/check_nots/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"any" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary disable otp
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthDisableOtpPost(body?: any, options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/disable_otp/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"any" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary generate otp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthGenerateOtpPost(options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/generate_otp/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary login
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost(body?: any, options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/login/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication noauthAuth required
            // http basic authentication required
            if (configuration && configuration.accessToken) {
                localVarHeaderParameter["Authorization"] = "Bearer " + configuration.accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"any" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary logout
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLogoutPost(body?: any, options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/logout/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"any" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary logoutall
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLogoutallPost(body?: any, options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/logoutall/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"any" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthMeGet(options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/me/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary notifications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthNotificationsGet(options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/notifications/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary hard reg
         * @param {string} [a] 
         * @param {string} [b] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegGet(a?: string, b?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/reg`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication noauthAuth required
            // http basic authentication required
            if (configuration && configuration.accessToken) {
                localVarHeaderParameter["Authorization"] = "Bearer " + configuration.accessToken;
            }

            if (a !== undefined) {
                localVarQueryParameter['a'] = a;
            }

            if (b !== undefined) {
                localVarQueryParameter['b'] = b;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary register
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegisterPost(body?: any, options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/register/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication noauthAuth required
            // http basic authentication required
            if (configuration && configuration.accessToken) {
                localVarHeaderParameter["Authorization"] = "Bearer " + configuration.accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"any" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary reset password
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthResetPasswordPost(body?: any, options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/reset_password/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication noauthAuth required
            // http basic authentication required
            if (configuration && configuration.accessToken) {
                localVarHeaderParameter["Authorization"] = "Bearer " + configuration.accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"any" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary reset password hard
         * @param {string} [a] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRpGet(body?: any, a?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/rp/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication noauthAuth required
            // http basic authentication required
            if (configuration && configuration.accessToken) {
                localVarHeaderParameter["Authorization"] = "Bearer " + configuration.accessToken;
            }

            localVarHeaderParameter["Content-Type"] = "application/json";

            if (a !== undefined) {
                localVarQueryParameter['a'] = a;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"any" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary del session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthSessionsDeleteDelete(options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/sessions/delete/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get sessions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthSessionsGet(options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/sessions/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary validate otp
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthValidateOtpPost(body?: any, options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/validate_otp/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication noauthAuth required
            // http basic authentication required
            if (configuration && configuration.accessToken) {
                localVarHeaderParameter["Authorization"] = "Bearer " + configuration.accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"any" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary verify otp
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthVerifyOtpPost(body?: any, options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/verify_otp/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"any" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary change name
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthChangeNamePost(body?: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).apiAuthChangeNamePost(body, options);
            return (fetch: FetchAPI = window.fetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary sub
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthSubscribePost(body?: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).apiAuthSubscribePost(body, options);
            return (fetch: FetchAPI = window.fetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary change password
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthChangePasswordPost(body?: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).apiAuthChangePasswordPost(body, options);
            return (fetch: FetchAPI = window.fetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary notifications check
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthCheckNotsPost(body?: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).apiAuthCheckNotsPost(body, options);
            return (fetch: FetchAPI = window.fetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary disable otp
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthDisableOtpPost(body?: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).apiAuthDisableOtpPost(body, options);
            return (fetch: FetchAPI = window.fetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary generate otp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthGenerateOtpPost(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).apiAuthGenerateOtpPost(options);
            return (fetch: FetchAPI = window.fetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary login
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost(body?: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).apiAuthLoginPost(body, options);
            return (fetch: FetchAPI = window.fetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary logout
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLogoutPost(body?: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).apiAuthLogoutPost(body, options);
            return (fetch: FetchAPI = window.fetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary logoutall
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLogoutallPost(body?: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).apiAuthLogoutallPost(body, options);
            return (fetch: FetchAPI = window.fetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthMeGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).apiAuthMeGet(options);
            return (fetch: FetchAPI = window.fetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary notifications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthNotificationsGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).apiAuthNotificationsGet(options);
            return (fetch: FetchAPI = window.fetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary hard reg
         * @param {string} [a] 
         * @param {string} [b] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegGet(a?: string, b?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).apiAuthRegGet(a, b, options);
            return (fetch: FetchAPI = window.fetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary register
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegisterPost(body?: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).apiAuthRegisterPost(body, options);
            return (fetch: FetchAPI = window.fetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary reset password
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthResetPasswordPost(body?: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).apiAuthResetPasswordPost(body, options);
            return (fetch: FetchAPI = window.fetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary reset password hard
         * @param {string} [a] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRpGet(body?: any, a?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).apiAuthRpGet(body, a, options);
            return (fetch: FetchAPI = window.fetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary del session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthSessionsDeleteDelete(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).apiAuthSessionsDeleteDelete(options);
            return (fetch: FetchAPI = window.fetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary get sessions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthSessionsGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).apiAuthSessionsGet(options);
            return (fetch: FetchAPI = window.fetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary validate otp
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthValidateOtpPost(body?: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).apiAuthValidateOtpPost(body, options);
            return (fetch: FetchAPI = window.fetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary verify otp
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthVerifyOtpPost(body?: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).apiAuthVerifyOtpPost(body, options);
            return (fetch: FetchAPI = window.fetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary change name
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthChangeNamePost(body?: any, options?: any) {
            return UserApiFp(configuration).apiAuthChangeNamePost(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary sub
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthSubscribePost(body?: any, options?: any) {
            return UserApiFp(configuration).apiAuthSubscribePost(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary change password
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthChangePasswordPost(body?: any, options?: any) {
            return UserApiFp(configuration).apiAuthChangePasswordPost(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary notifications check
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthCheckNotsPost(body?: any, options?: any) {
            return UserApiFp(configuration).apiAuthCheckNotsPost(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary disable otp
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthDisableOtpPost(body?: any, options?: any) {
            return UserApiFp(configuration).apiAuthDisableOtpPost(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary generate otp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthGenerateOtpPost(options?: any) {
            return UserApiFp(configuration).apiAuthGenerateOtpPost(options)(fetch, basePath);
        },
        /**
         * 
         * @summary login
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost(body?: any, options?: any) {
            return UserApiFp(configuration).apiAuthLoginPost(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary logout
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLogoutPost(body?: any, options?: any) {
            return UserApiFp(configuration).apiAuthLogoutPost(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary logoutall
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLogoutallPost(body?: any, options?: any) {
            return UserApiFp(configuration).apiAuthLogoutallPost(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthMeGet(options?: any) {
            return UserApiFp(configuration).apiAuthMeGet(options)(fetch, basePath);
        },
        /**
         * 
         * @summary notifications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthNotificationsGet(options?: any) {
            return UserApiFp(configuration).apiAuthNotificationsGet(options)(fetch, basePath);
        },
        /**
         * 
         * @summary hard reg
         * @param {string} [a] 
         * @param {string} [b] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegGet(a?: string, b?: string, options?: any) {
            return UserApiFp(configuration).apiAuthRegGet(a, b, options)(fetch, basePath);
        },
        /**
         * 
         * @summary register
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegisterPost(body?: any, options?: any) {
            return UserApiFp(configuration).apiAuthRegisterPost(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary reset password
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthResetPasswordPost(body?: any, options?: any) {
            return UserApiFp(configuration).apiAuthResetPasswordPost(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary reset password hard
         * @param {string} [a] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRpGet(a?: string, options?: any) {
            return UserApiFp(configuration).apiAuthRpGet(a, options)(fetch, basePath);
        },
        /**
         * 
         * @summary del session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthSessionsDeleteDelete(options?: any) {
            return UserApiFp(configuration).apiAuthSessionsDeleteDelete(options)(fetch, basePath);
        },
        /**
         * 
         * @summary get sessions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthSessionsGet(options?: any) {
            return UserApiFp(configuration).apiAuthSessionsGet(options)(fetch, basePath);
        },
        /**
         * 
         * @summary validate otp
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthValidateOtpPost(body?: any, options?: any) {
            return UserApiFp(configuration).apiAuthValidateOtpPost(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary verify otp
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthVerifyOtpPost(body?: any, options?: any) {
            return UserApiFp(configuration).apiAuthVerifyOtpPost(body, options)(fetch, basePath);
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary change name
     * @param {any} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiAuthChangeNamePost(body?: any, options?: any) {
        return UserApiFp(this.configuration).apiAuthChangeNamePost(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary sub
     * @param {any} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiAuthSubscribePost(body?: any, options?: any) {
        return UserApiFp(this.configuration).apiAuthSubscribePost(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary change password
     * @param {any} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiAuthChangePasswordPost(body?: any, options?: any) {
        return UserApiFp(this.configuration).apiAuthChangePasswordPost(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary notifications check
     * @param {any} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiAuthCheckNotsPost(body?: any, options?: any) {
        return UserApiFp(this.configuration).apiAuthCheckNotsPost(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary disable otp
     * @param {any} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiAuthDisableOtpPost(body?: any, options?: any) {
        return UserApiFp(this.configuration).apiAuthDisableOtpPost(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary generate otp
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiAuthGenerateOtpPost(options?: any) {
        return UserApiFp(this.configuration).apiAuthGenerateOtpPost(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary login
     * @param {any} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiAuthLoginPost(body?: any, options?: any) {
        return UserApiFp(this.configuration).apiAuthLoginPost(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary logout
     * @param {any} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiAuthLogoutPost(body?: any, options?: any) {
        return UserApiFp(this.configuration).apiAuthLogoutPost(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary logoutall
     * @param {any} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiAuthLogoutallPost(body?: any, options?: any) {
        return UserApiFp(this.configuration).apiAuthLogoutallPost(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary me
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiAuthMeGet(options?: any) {
        return UserApiFp(this.configuration).apiAuthMeGet(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary notifications
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiAuthNotificationsGet(options?: any) {
        return UserApiFp(this.configuration).apiAuthNotificationsGet(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary hard reg
     * @param {string} [a] 
     * @param {string} [b] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiAuthRegGet(a?: string, b?: string, options?: any) {
        return UserApiFp(this.configuration).apiAuthRegGet(a, b, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary register
     * @param {any} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiAuthRegisterPost(body?: any, options?: any) {
        return UserApiFp(this.configuration).apiAuthRegisterPost(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary reset password
     * @param {any} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiAuthResetPasswordPost(body?: any, options?: any) {
        return UserApiFp(this.configuration).apiAuthResetPasswordPost(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary reset password hard
     * @param {string} [a] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiAuthRpGet(body?: any, a?: string, options?: any) {
        return UserApiFp(this.configuration).apiAuthRpGet(body, a, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary del session
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiAuthSessionsDeleteDelete(options?: any) {
        return UserApiFp(this.configuration).apiAuthSessionsDeleteDelete(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary get sessions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiAuthSessionsGet(options?: any) {
        return UserApiFp(this.configuration).apiAuthSessionsGet(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary validate otp
     * @param {any} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiAuthValidateOtpPost(body?: any, options?: any) {
        return UserApiFp(this.configuration).apiAuthValidateOtpPost(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary verify otp
     * @param {any} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiAuthVerifyOtpPost(body?: any, options?: any) {
        return UserApiFp(this.configuration).apiAuthVerifyOtpPost(body, options)(this.fetch, this.basePath);
    }

}
