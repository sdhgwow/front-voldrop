// tslint:disable
/**
 * Voldrop API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

export * from "./api";
export * from "./configuration";

// tslint:disable
/**
 * API Test
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import { handleAlert } from "@/utils";
import { ContentApi, UserApi } from "./api";


export * from "./api";
export * from "./configuration";



const api = {
    userApi: new UserApi(),
    contentApi: new ContentApi(),
}

export class ApiError extends Error {
    constructor(
        public message: string
    ) {
        super(message);
    }
}

async function callApi(promise: Promise<Response>, options?: any, returnFullData = false) {
    options?.setLoading?.(true);

    try {
        const res = await promise.then(res => {
            if (res.status == 401)
                throw new ApiError('Unauthorized')
            return res.text()
        }).then((res) => {
            const data = JSON.parse(res)

            if (data.status == "success") {
                if (data.message) {
                    return returnFullData ? data : data.message;
                } else {
                    return data
                }
            } else {
                if (data.detail) {
                    handleAlert('error', data.detail)
                }

                throw new ApiError(data.message)
            }
        })
        return res
    } catch (ex) {

        if (ex instanceof Response) {
            const data = await ex.json()
            if (data.detail) {
                handleAlert('error', data.detail)
                throw new ApiError(data.detail)
            }

            if (data.message) {
                handleAlert('error', data.message)
                throw new ApiError(data.message)
            }

            if (data.message.email[0]) {
                handleAlert('error', data.message.email[0])
                throw new ApiError(data.message.email[0])
            }
        }
        console.error(ex)
        handleAlert('error', "Ошибка подключения, попробуйте позже (см. детали в консоли)")
        throw ex
    } finally {
        options?.setLoading?.(false);
    }
}

export default {

    api,

    auth: {
        login: (body: any, options: any) => callApi(api.userApi.apiAuthLoginPost(body), options),
        register: (body: any, options: any) => callApi(api.userApi.apiAuthRegisterPost(body), options),
        regHard: (a: string, b: string, options: any) => callApi(api.userApi.apiAuthRegGet(a, b), options),
        recoveryHard: (body: any, a: string, options: any) => callApi(api.userApi.apiAuthRpGet(body, a), options),
        changeName: (body: any, options: any) => callApi(api.userApi.apiAuthChangeNamePost(body), options),
        changePassword: (body: any, options: any) => callApi(api.userApi.apiAuthChangePasswordPost(body), options),
        disableOtp: (body: any, options: any) => callApi(api.userApi.apiAuthDisableOtpPost(body), options),
        generateOtp: (options: any) => callApi(api.userApi.apiAuthGenerateOtpPost(options), options),
        validateOtp: (body: any, options: any) => callApi(api.userApi.apiAuthValidateOtpPost(body), options),
        verifyOtp: (body: any, options: any) => callApi(api.userApi.apiAuthVerifyOtpPost(body), options),
        subNews: (body: any, options: any) => callApi(api.userApi.apiAuthSubscribePost(body), options),
    },

    user: {
        info: (headers: any) => callApi(api.userApi.apiAuthMeGet({ headers })),
        logout: (body: any, options: any) => callApi(api.userApi.apiAuthLogoutPost(body), options),
        logoutAll: (body: any, options: any) => callApi(api.userApi.apiAuthLogoutallPost(body), options),
        notifications: (options: any) => callApi(api.userApi.apiAuthNotificationsGet(options)),
        sessions: (options: any) => callApi(api.userApi.apiAuthSessionsGet(options)),
        deleteSession: (options: any) => callApi(api.userApi.apiAuthSessionsDeleteDelete(options)),
        resetPassword: (body: any, options: any) => callApi(api.userApi.apiAuthResetPasswordPost(body), options),
    },

    content: {
        addToCart: (body: any, options: any) => callApi(api.contentApi.apiContentCartAddPost(body), options),
        decreaseCartItem: (options: any) => callApi(api.contentApi.apiContentCartDecrease5Post(options), options),
        deleteCartItem: (options: any) => callApi(api.contentApi.apiContentCartDelete1Delete(options), options),
        getCart: (options: any) => callApi(api.contentApi.apiContentCartGet(options), options),
        getFilter: (
            category?: string, 
            brand?: string, 
            collection?: string, 
            season?: string, 
            tags?: string, 
            original?: string, 
            minPrice?: string, 
            maxPrice?: string, 
            colors?: string, 
            sizes?: string, 
            isPopular?: string, 
            isNew?: string, 
            search?: string, 
            options?: any
        ) => callApi(api.contentApi.apiContentFilterGet(
            category, brand, collection, season, tags, original, 
            minPrice, maxPrice, colors, sizes, isPopular, isNew, 
            search
        ), options),
        createOrder: (options: any) => callApi(api.contentApi.apiContentOrderCreatePost(options), options),
        getOrderHistory: (options: any) => callApi(api.contentApi.apiContentOrderHistoryGet(options), options),
        paymentCallback: (body: any, options: any) => callApi(api.contentApi.apiContentPaymentCallbackPost(body), options),
        getProduct: (options: any) => callApi(api.contentApi.apiContentProduct7Get(options)),
        getProducts: (
            category?: string, 
            brand?: string, 
            collection?: string, 
            season?: string, 
            tags?: string, 
            original?: string, 
            minPrice?: string, 
            maxPrice?: string, 
            colors?: string, 
            sizes?: string, 
            isPopular?: string, 
            isNew?: string, 
            search?: string, 
            options?: any
        ) => callApi(api.contentApi.apiContentProductsGet(
            category, brand, collection, season, tags, original, 
            minPrice, maxPrice, colors, sizes, isPopular, isNew, 
            search
        ), options),
    }
}